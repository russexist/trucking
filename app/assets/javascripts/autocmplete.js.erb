var autocompleteFrom;
var autocompleteTo;
var inputLatLng = { lat: 49.0, lng: 32.0 }
var markersArrayFrom = [];
var markersArrayTo = [];

function initAutocomplete() {
  autocompleteFrom = new google.maps.places.Autocomplete(
      /** @type {!HTMLInputElement} */(document.getElementById('autocompleteFrom')),
      {types: ['geocode']});
  autocompleteFrom.addListener('place_changed', fillInAddressFrom);

  autocompleteTo = new google.maps.places.Autocomplete(
      /** @type {!HTMLInputElement} */(document.getElementById('autocompleteTo')),
      {types: ['geocode']});
  autocompleteTo.addListener('place_changed', fillInAddressTo);

  initMapFrom();
  function initMapFrom() {
    var geocoderFrom = new google.maps.Geocoder;
    var infowindowFrom = new google.maps.InfoWindow;

    if ($('#autocompleteFrom').val() == 0) {
      var mapFrom = new google.maps.Map(document.getElementById('mapFrom'), {
        center: inputLatLng,
        zoom: 8
      });
      // Try HTML5 geolocation.
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var posFrom = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          var mapFrom = new google.maps.Map(document.getElementById('mapFrom'), {
            center: posFrom,
            zoom: 16
          });
          var infowindowFrom = new google.maps.InfoWindow({
            content: '<%= I18n.t('common.current_location') %>'
          });
          var markerFrom = new google.maps.Marker({
            position: posFrom,
            map: mapFrom
          });
          markersArrayFrom.push(markerFrom);
          infowindowFrom.open(mapFrom, markerFrom);
          mapFrom.addListener('click', function(event) {
            if (markersArrayFrom.length != 0){
              deleteMarkers(markersArrayFrom);
            }
            geocodeLatLngFrom(geocoderFrom, mapFrom, event.latLng);
            var markerFrom = new google.maps.Marker({
              position: event.latLng,
              map: mapFrom
            });
            markersArrayFrom.push(markerFrom);
          });
        });
        console.log('navigator load from');
      }
      else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, mapFrom.getCenter());
        }
      console.log('empty address from');
    }
    else {
      var mapFrom = new google.maps.Map(document.getElementById('mapFrom'), {
        center: inputLatLng,
        zoom: 8
      });
      geocodeAddress(geocoderFrom, mapFrom, 'from', $('#autocompleteFrom').val());
      console.log('fill address from');
    }

    mapFrom.addListener('click', function(event) {
      if (markersArrayFrom.length != 0){
        deleteMarkers(markersArrayFrom);
      }
      geocodeLatLngFrom(geocoderFrom, mapFrom, event.latLng);
      addMarker(event.latLng, mapFrom, markersArrayFrom);
    });
  }

  initMapTo();
  function initMapTo() {
    var geocoderTo = new google.maps.Geocoder;
    var infowindowTo = new google.maps.InfoWindow;
    if ($('#autocompleteTo').val() == 0) {
      var mapTo = new google.maps.Map(document.getElementById('mapTo'), {
        center: inputLatLng,
        zoom: 8
      });
      // Try HTML5 geolocation.
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var posTo = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          var mapTo = new google.maps.Map(document.getElementById('mapTo'), {
            center: posTo,
            zoom: 16
          });
          var infowindowTo = new google.maps.InfoWindow({
            content: '<%= I18n.t('common.current_location') %>'
          });
          var markerTo = new google.maps.Marker({
            position: posTo,
            map: mapTo
          });
          markersArrayTo.push(markerTo);
          infowindowTo.open(mapTo, markerTo);
          mapTo.addListener('click', function(event) {
            if (markersArrayTo.length != 0){
              deleteMarkers(markersArrayTo);
            }
            geocodeLatLngTo(geocoderTo, mapTo, event.latLng);
            var markerTo = new google.maps.Marker({
              position: event.latLng,
              map: mapTo
            });
            markersArrayTo.push(markerTo);
          });
        });
        console.log('navigator load to');
      }
      else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, mapTo.getCenter());
        }
      console.log('empty address to');
    }
    else {
      var mapTo = new google.maps.Map(document.getElementById('mapTo'), {
        center: inputLatLng,
        zoom: 8
      });
      geocodeAddress(geocoderTo, mapTo, 'to', $('#autocompleteTo').val());
      console.log('fill address to');
    }

    mapTo.addListener('click', function(event) {
      if (markersArrayTo.length != 0){
        deleteMarkers(markersArrayTo);
      }
      geocodeLatLngTo(geocoderTo, mapTo, event.latLng);
      addMarker(event.latLng, mapTo, markersArrayTo);
    });
  }
}

// functions
function geocodeAddress(geocoder, resultsMap, suffix, address) {
  geocoder.geocode({'address': address}, function(results, status) {
    if (status === 'OK') {
      resultsMap.setCenter(results[0].geometry.location);
      if (suffix == "from") {
        var mapFrom = new google.maps.Map(document.getElementById('mapFrom'), {
          center: results[0].geometry.location,
          zoom: 15
        });
        var infowindowFrom = new google.maps.InfoWindow({
          content: $('#autocompleteFrom').val()
        });
        var markerFrom = new google.maps.Marker({
          position: results[0].geometry.location,
          map: mapFrom
        });
        infowindowFrom.open(mapFrom, markerFrom);
        markersArrayFrom.push(markerFrom);
        markerFrom.addListener('click', function() {
          mapFrom.setZoom(17);
          mapFrom.setCenter(markerFrom.getPosition());
        });
        mapFrom.addListener('click', function(event) {
          if (markersArrayFrom.length != 0){
            deleteMarkers(markersArrayFrom);
          }
          geocodeLatLngFrom(geocoder, mapFrom, event.latLng);
          addMarker(event.latLng, mapFrom, markersArrayFrom);
        });
        console.log('marker from');
      }
      else {
        var mapTo = new google.maps.Map(document.getElementById('mapTo'), {
          center: results[0].geometry.location,
          zoom: 15
        });
        var infowindowTo = new google.maps.InfoWindow({
          content: $('#autocompleteTo').val()
        });
        var markerTo = new google.maps.Marker({
          position: results[0].geometry.location,
          map: mapTo
        });
        infowindowTo.open(mapTo, markerTo);
        markersArrayTo.push(markerTo);
        markerTo.addListener('click', function() {
          mapTo.setZoom(17);
          mapTo.setCenter(markerTo.getPosition());
        });
        mapTo.addListener('click', function(event) {
          if (markersArrayTo.length != 0){
            deleteMarkers(markersArrayTo);
          }
          geocodeLatLngTo(geocoder, mapTo, event.latLng);
          addMarker(event.latLng, mapTo, markersArrayTo);
        });
        console.log('marker to');
      }
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  });
}

function geocodeLatLngFrom(geocoder, map, location) {
  var valueLat = location.toString().split('(');
  var valueLng = location.toString().split(', ');
  var latlng = {lat: parseFloat(valueLat[1]), lng: parseFloat(valueLng[1])};
  geocoder.geocode({'location': latlng}, function(results, status) {
    if (status === 'OK') {
      if (results[0]) {
        $('#autocompleteFrom').val(results[0].formatted_address);
        console.log('good from');
      } else {
        window.alert('No results found');
      }
    }
  });
}

function geocodeLatLngTo(geocoder, map, location) {
  var valueLat = location.toString().split('(');
  var valueLng = location.toString().split(', ');
  var latlng = {lat: parseFloat(valueLat[1]), lng: parseFloat(valueLng[1])};
  geocoder.geocode({'location': latlng}, function(results, status) {
    if (status === 'OK') {
      if (results[0]) {
        $('#autocompleteTo').val(results[0].formatted_address);
        console.log('good to');
      } else {
        window.alert('No results found');
      }
    }
  });
}

function addMarker(location, map, array) {
  var marker = new google.maps.Marker({
    position: location,
    map: map
  });
  array.push(marker);
}

function setMapOnAll(map, array) {
  for (var i = 0; i < array.length; i++) {
    array[i].setMap(map);
  }
}

function clearMarkers(array) {
   setMapOnAll(null, array);
 }

function deleteMarkers(array) {
  clearMarkers(array);
  array = [];
}

function handleLocationError(browserHasGeolocation, infoWindow, pos) {
  infoWindow.setPosition(pos);
  infoWindow.setContent(browserHasGeolocation ? 'Error: The Geolocation service failed.' : 'Error: Your browser doesn\'t support geolocation.');
}

function fillInAddressFrom() {
  var placeFrom = autocompleteFrom.getPlace();
  var geocoderFrom = new google.maps.Geocoder;
  var mapFrom = new google.maps.Map(document.getElementById('mapFrom'), {
    center: placeFrom.geometry.location,
    zoom: 15
  });
  var infowindowFrom = new google.maps.InfoWindow({
    content: placeFrom.formatted_address
  });
  var markerFrom = new google.maps.Marker({
    position: placeFrom.geometry.location,
    map: mapFrom
  });
  markersArrayFrom.push(markerFrom);
  markerFrom.addListener('click', function() {
    infowindowFrom.open(mapFrom, markerFrom);
    mapFrom.setZoom(17);
    mapFrom.setCenter(markerFrom.getPosition());
  });
  mapFrom.addListener('click', function(event) {
    if (markersArrayFrom.length != 0){
      deleteMarkers(markersArrayFrom);
    }
    geocodeLatLngFrom(geocoderFrom, mapFrom, event.latLng);
    var markerFrom = new google.maps.Marker({
      position: event.latLng,
      map: mapFrom
    });
    markersArrayFrom.push(markerFrom);
  });
}

function fillInAddressTo() {
  var placeTo = autocompleteTo.getPlace();
  var geocoderTo = new google.maps.Geocoder;
  var mapTo = new google.maps.Map(document.getElementById('mapTo'), {
    center: placeTo.geometry.location,
    zoom: 15
  });
  var infowindowTo = new google.maps.InfoWindow({
    content: placeTo.formatted_address
  });
  var markerTo = new google.maps.Marker({
    position: placeTo.geometry.location,
    map: mapTo
  });
  markersArrayTo.push(markerTo);
  markerTo.addListener('click', function() {
    infowindowTo.open(mapTo, markerTo);
    mapTo.setZoom(17);
    mapTo.setCenter(markerTo.getPosition());
  });
  mapTo.addListener('click', function(event) {
    if (markersArrayTo.length != 0){
      deleteMarkers(markersArrayTo);
    }
    geocodeLatLngTo(geocoderTo, mapTo, event.latLng);
    var markerTo = new google.maps.Marker({
      position: event.latLng,
      map: mapTo
    });
    markersArrayTo.push(markerTo);
  });
}
